#workout-root
  .workout.clearfix{':class': 'workoutIdentifier', ':id': 'workoutIdentifier', 'v-cloak': true}
    %h2
      {{ workout.split_name }}
      %small {{ workout.workout_date }}
    %p.notes
      {{ workout.notes }}
    %transition-group.exercises{name: 'basic-fx', tag: 'div'}
      .exercise{'v-for': 'exercise in workout.exercises', ':class': 'identExercise(exercise)', ':id': 'identExercise(exercise)', ':key': 'exercise.id'}
        .panel.panel-default
          .panel-heading.clearfix
            %h5.panel-title.pull-left {{ exercise.name }}
            .exercise-header-controls.pull-right
              %button.btn.btn-default{'@click.capture': 'onDestroyExercise(exercise, $event)'}
                %span.glyphicon.glyphicon-remove
          .panel-body
            %p.notes {{ exercise.notes }}
          %transition-group.list-group.exercise-sets{name: 'basic-fx', tag: 'ul'}
            %li.list-group-item.exercise-set.clearfix{'v-for': 'eset in exercise.exercise_sets', ':class': 'identExerciseSet(eset)', ':id': 'identExerciseSet(eset)', ':key': 'eset.id'}
              %p.pull-left
                %span.weight{'v-show': 'isWeighted(eset)'}
                  {{ eset.weight }} &times;
                %span.reps
                  {{ eset.reps }}
                %span.glyphicon{':class': 'glyphiconForSet(eset)'}
              .btn-group.pull-right.exercise-set-controls{role: 'group'}
                %button.btn.btn-default.edit{type: 'button', '@click': 'onEditExerciseSet(eset, $event)'}
                  %span.glyphicon.glyphicon-pencil
                %button.btn.btn-default.show-notes{type: 'button', data: {toggle: 'popover'}, ':data-content': 'eset.notes'}
                  %span.glyphicon.glyphicon-comment
                %button.btn.btn-default.destroy{type: 'button', '@click': 'onDestroyExerciseSet(exercise, eset, $event)'}
                  %span.glyphicon.glyphicon-trash
          .panel-footer.clearfix
            .btn-group.pull-right.exercise-footer-controls
              %button.btn.btn-default.add-exercise-set{type: 'button', '@click': 'onAddExerciseSet(exercise, $event)'}
                %span.glyphicon.glyphicon-plus
                &nbsp;Add Set
    .exercises-controls.pull-right
      %button.btn.btn-default{type: 'button', data: {toggle: 'modal', target: '#add-exercise-modal'}}
        %span.glyphicon.glyphicon-plus
        &nbsp;Add Exercise

  / Add new exercise modal
  #add-exercise-modal{'is': 'modal-dialog', title: 'Add Exercise', 'v-cloak': true}
    %p.ui-front
      %label{for: 'exercise-name-input'}= "Name: "
      %input#exercise-name-input{type: 'text', placeholder: 'name', 'v-model': 'newExerciseName'}
    %button.btn.btn-default{slot: 'footer', data: {dismiss: 'modal'}} Cancel
    %button.btn.btn-primary{slot: 'footer', '@click': 'onAddExercise'} Add Exercise

%script#modal-template{type: 'text/x-template'}
  .modal.fade(role='dialog')
    .modal-dialog(role='document')
      .modal-content
        .modal-header
          %button.close{type: 'button', data: {dismiss: 'modal'}} &times;
          %h4.modal-title {{ title }}
        .modal-body
          %slot
        .modal-footer
          %slot{name: 'footer'}

- content_for :scripts do
  :coffee
    Vue.component('modal-dialog', {
      template: '#modal-template'
      props: ['title']
    })

    this.app = new Vue({
      el: '#workout-root'
      data: {
        workout: {
          id: null
          workout_date: null
          time_started: null
          time_ended: null
          exercises: []
          cardios: []
          notes: null
        }
        exerciseNames: []
        newExerciseName: ''
      }
      computed: {
        workoutIdentifier: () ->
          'workout-' + this.workout.id
      }
      methods: {
        isWeighted: (eset) ->
          eset.weight? && eset.weight > 0

        glyphiconForSet: (eset) ->
          eset.target_reps? && eset.reps >= eset.target_reps && 'glyphicon-ok' || 'glyphicon-remove'

        identExercise: (exercise) ->
          'exercise-' + exercise.id

        identExerciseSet: (eset) ->
          'exercise-set-' + eset.id

        onAddExercise: (event) ->
          name = $('#exercise-name-input').val()
          console.log("onAddExercise: ", name, event)
          unless name? && name
            console.log("Invalid name: ", this.newExerciseName)
            # TODO: Alert the user
            return false
          data = {
            exercise: {
              workout_id: this.workout.id,
              name: name
            }
          }
          $.post('/exercises.json', data).done( (exercise,jqxhr) =>
            console.log("Exercise added: ", exercise)
            this.workout.exercises.push(exercise)
            $('#add-exercise-modal').modal('hide')
          ).fail (failData, jqxhr) ->
            console.warn('Exercise creation failed: ', failData, jqxhr)


        onEditExerciseSet: (eset, event) ->
          console.log("onEditExerciseSet: ", eset, event)

        onDestroyExerciseSet: (exercise, eset, event) ->
          console.log("onDestroyExerciseSet: ", eset, event)
          index = exercise.exercise_sets.indexOf(eset)
          if(index < 0)
            console.error("Unable to find index of exercise set")
            return
          btn = $(event.target).closest('button')
          btn.prop('disabled',true)
          $.ajax('/exercise_sets/' + eset.id + '.json', {method: 'DELETE'}).done( (jqxhr) ->
            console.log("Deleted exercise set successfully.")
            exercise.exercise_sets.splice(index,1)
          ).fail (jqxhr) ->
            console.error('Error deleting exercise set: ', jqxhr)
            btn.prop('disabled', false)

        onDestroyExercise: (exercise, event) ->
          console.log("onDestroyExercise: ", exercise)
          index = this.workout.exercises.indexOf(exercise)
          if(index < 0)
            console.error("Unable to find index of exercise")
            return
          btn = $(event.target).closest('button')
          btn.prop('disabled',true)
          self = this
          $.ajax("/exercises/" + exercise.id + '.json', {method: 'DELETE'}).done( (jqxhr) ->
            console.log("Deleted exercise successfully.")
            self.workout.exercises.splice(index, 1)
          ).fail (jqxhr) ->
            console.log("Error deleting exercise: ", jqxhr)
            btn.prop('disabled', false)

        onAddExerciseSet: (exercise) ->
          console.log("onAddExerciseSet: ", exercise)
          data = {
            exercise_set: {
              exercise_id: exercise.id
            }
          }
          $.post('/exercise_sets.json', data).done( (newSet,jqxhr) =>
            console.log("Exercise set created successfully: ", newSet)
            exercise.exercise_sets.push(newSet)
          ).fail (err, jqxhr) ->
            console.log("Error creating new exercise set: ", err, jqxhr)

      }
      created: () ->
        self = this
        console.log("Loading workout data...")
        $.getJSON("#{workout_path(@workout)}", {full: true}).then (data,jqxhr) ->
          self.workout = data
          console.log("Workout data loaded: ", data)
        console.log("Loading exercise names...")
        $.getJSON('/exercises/names').done (data, jqxhr) ->
          self.exerciseNames = data
          console.log("Loaded exercise names: ", data)
          $('#exercise-name-input').autocomplete({source: data})
    })
    $ () ->
      $('[data-toggle="popover"]').popover()